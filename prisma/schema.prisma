// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  User
  Admin
  SuperAdmin
}

enum Status {
  isActive
  isSold
}

model Region {
  id        String   @id @default(uuid())
  name_uz    String   @default("")
  name_ru    String   @default("")
  name_en    String   @default("")
  createdAt DateTime @default(now())
  users     User[]
  houses    House[]
}

model User {
  id        String     @id @default(uuid())
  fullname  String
  email     String     @unique
  phone     String     @unique
  password  String
  role      UserRole   @default(User)
  regionId  String?
  region    Region?    @relation(fields: [regionId], references: [id])
  createdAt DateTime   @default(now())
  houses    House[]
  favorites Favorite[]
  comments  Comment[]
  sessions  Session[]
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  ipAddress  String
  deviceData String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model House {
  id          String     @id @default(uuid())
  address     String
  price       Int
  description String
  images      String[]
  status      Status     @default(isActive)
  createdAt   DateTime   @default(now())
  regionId    String
  region      Region     @relation(fields: [regionId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  favorites   Favorite[]
  comments    Comment[]
}

model Favorite {
  id        String   @id @default(uuid())
  houseId   String
  house     House    @relation(fields: [houseId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  House     House?   @relation(fields: [houseId], references: [id])
  houseId   String?
  createdAt DateTime @default(now())
}
